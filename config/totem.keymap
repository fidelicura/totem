//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <11 12 13>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <16 17>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <17 18>;
        };
    };

    behaviors {
        td_brack_open: td_brack_open {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BRACK_OPEN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp LBRC>;
        };

        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;

            label = "HOLD_TAP";
        };

        td_brack_close: td_brack_close {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BRACK_CLOSE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RIGHT_BRACE>;
        };

        td_brack_morph: td_brack_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TD_BRACK_MORPH";
            bindings = <&td_brack_open>, <&td_brack_close>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_arrow_open: td_arrow_open {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ARROW_OPEN";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&kp LEFT_BRACKET>;
        };

        td_arrow_close: td_arrow_close {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ARROW_CLOSE";
            #binding-cells = <0>;
            bindings = <&kp GT>, <&kp RIGHT_BRACKET>;
        };

        td_arrow_morph: td_arrow_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TD_ARROW_MORPH";
            bindings = <&td_arrow_open>, <&td_arrow_close>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
           &kp Q              &kp W              &kp E              &kp R             &kp T        &kp Y        &kp U             &kp I              &kp O              &kp P
           &hold_tap LCTRL A  &hold_tap LSHFT S  &hold_tap LMETA D  &hold_tap LALT F  &kp G        &kp H        &hold_tap RALT J  &hold_tap RMETA K  &hold_tap RSHFT L  &hold_tap RCTRL SEMICOLON
&kp TILDE  &kp Z              &kp X              &kp C              &kp V             &kp B        &kp N        &kp M             &kp COMMA          &kp DOT            &kp FSLH                   &kp SQT
                                                 &td_brack_morph    &lt 1 SPACE       &lt 2 TAB    &lt 3 ENTER  &lt 1 BACKSPACE   &td_arrow_morph
            >;
        };

        math {
            label = "MATH";
            bindings = <
           &kp DOT    &kp N7        &kp N8        &kp N9        &kp ASTERISK    &trans  &trans    &trans     &trans     &trans
           &kp N0     &kp NUMBER_4  &kp N5        &kp N6        &kp MINUS       &trans  &kp RALT  &kp RMETA  &kp RSHFT  &kp RCTRL
&kp EQUAL  &kp SLASH  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS        &trans  &trans    &trans     &trans     &trans     &trans
                                    &trans        &trans        &trans          &trans  &trans    &trans
            >;
        };

        navi {
            bindings = <
        &trans     &trans     &trans     &trans    &trans    &trans    &kp PAGE_DOWN  &kp PG_UP     &trans     &trans
        &kp LCTRL  &kp LSHFT  &kp LMETA  &kp LALT  &trans    &kp LEFT  &kp DOWN       &kp UP        &kp RIGHT  &kp C_MUTE
&trans  &trans     &trans     &trans     &trans    &trans    &trans    &kp C_VOL_DN   &kp C_VOL_UP  &trans     &trans      &trans
                              &trans     &trans    &trans    &trans    &trans         &trans
            >;

            label = "NAVI";
        };

        symb {
            label = "SYMB";
            bindings = <
           &kp LEFT_BRACKET       &kp AMPERSAND    &kp ASTRK    &kp LPAR   &kp RIGHT_BRACKET    &trans  &trans    &trans     &trans     &trans
           &kp RIGHT_PARENTHESIS  &kp DOLLAR       &kp PERCENT  &kp CARET  &kp BACKSLASH        &trans  &kp RALT  &kp RMETA  &kp RSHFT  &kp RCTRL
&kp GRAVE  &kp LEFT_BRACE         &kp EXCLAMATION  &kp AT_SIGN  &kp HASH   &kp RIGHT_BRACE      &trans  &trans    &trans     &trans     &trans     &trans
                                                   &trans       &trans     &trans               &trans  &trans    &trans
            >;
        };

        func {
            label = "ADJU";
            bindings = <
        &kp F12  &kp F7  &kp F8  &kp F9  &trans    &bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &out OUT_TOG  &trans
        &kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans      &kp RALT    &kp RMETA   &kp RSHFT     &kp RCTRL
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans      &trans      &trans      &trans        &trans     &trans
                         &trans  &trans  &trans    &trans      &trans      &trans
            >;
        };
    };
};
